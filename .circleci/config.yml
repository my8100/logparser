# Python CircleCI 2.1 configuration file
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.2
  allure: ayte/allure@0.1.3
jobs:
  py39: &test-template
    docker:
      - image: cimg/python:3.9
    working_directory: ~/repo
    parameters:
      is-py27:
        type: boolean
        default: false
      allure-version:
        description: Allure version to use
        type: string
        default: 2.13.1
      allure-configuration-path:
        description: Path to Allure configuration, uses default one if omitted
        type: string
        default: /usr/local/share/allure/config/allure.yml
      allure-target-path:
        description: Path for report directory
        type: string
        default: allure-report
      allure-results-path:
        description: Path to directory with test results
        type: string
        default: allure-results
      allure-artifact-path:
        description: Path that will be used when storing result as artifact
        type: string
        default: Report/Allure
    steps:
      - run:
          name: Install telnet
          command: |
            sudo apt-get update && sudo apt-get install telnet
      - run:
          name: Install Java 11
          command: |
            sudo apt-get update
            sudo apt-get install -y openjdk-11-jdk
      - run:
          name: Set JAVA_HOME
          command: |
            echo "export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - when:
          condition: <<parameters.is-py27>>
          steps:
            - run:
                name: Create virtual env in PY2
                command: |
                  virtualenv ./venv
      - unless:
          condition: <<parameters.is-py27>>
          steps:
            - run:
                name: Create virtual env in PY3
                command: |
                  python3 -m venv venv
      - run:
          name: Install dependencies
          command: |
            # python3 -m venv venv
            # virtualenv ./venv
            . venv/bin/activate
            which python
            python --version
            pip install -r requirements.txt
            pip install -r requirements-tests.txt
      - run:
          name: Run tests
          command: |
            ls -la
            . venv/bin/activate
            flake8 . --count --exclude=./venv* --select=E9,F63,F7,F82 --show-source --statistics
            coverage erase
            coverage run --source=logparser -m pytest -s -vv -l --disable-warnings --alluredir=allure-results tests
      - run:
          name: Generate report
          command: |
            . venv/bin/activate
            coverage report
            coverage html
            coverage xml
            ls -la
            ls -la allure-results || echo 'ignore error'
            coveralls
          # https://discuss.circleci.com/t/make-custom-command-run-always-with-when-always/38957
          # https://circleci.com/docs/configuration-reference/#the-when-attribute
          when: always
      - store_artifacts:
          path: htmlcov
      - store_artifacts:
          path: coverage.xml
      - codecov/upload:
          file: coverage.xml
      # https://discuss.circleci.com/t/how-can-we-publish-pytest-results-to-circleci-using-allure-reports/37830/2
      # https://circleci.com/developer/orbs/orb/ayte/allure
      # - allure/install
      # - allure/report
      # https://circleci.com/docs/configuration-reference/#the-when-step
      - when:
          condition:
            equal: [ 1, 1 ]
          steps:
            - run:
                name: Allure archive download
                command: >-
                  curl -L https://github.com/allure-framework/allure2/releases/download/<<
                  parameters.allure-version >>/allure-commandline-<< parameters.allure-version >>.zip -o
                  /tmp/allure.zip
                when: always
            - run:
                name: Archive extraction
                command: unzip /tmp/allure.zip
                when: always
            - run:
                name: Allure installation
                command: sudo mv allure-<< parameters.allure-version >> /usr/local/share/allure
                when: always
            - run:
                name: Allure binary symlinking
                command: sudo ln -s /usr/local/share/allure/bin/allure /usr/local/bin/allure
                when: always
      - when:
          condition:
            equal: [ 1, 1 ]
          steps:
            - run:
                name: >-
                  Allure report generation (<< parameters.allure-results-path >> -> <<
                  parameters.allure-target-path >>)
                command: |
                  allure generate \
                    --config << parameters.allure-configuration-path >> \
                    --report-dir << parameters.allure-target-path >> \
                    << parameters.allure-results-path >>
                when: always
            - store_artifacts:
                path: << parameters.allure-target-path >>
                destination: << parameters.allure-artifact-path >>
  py27:
    <<: *test-template
    docker:
      - image: cimg/python:2.7
  py38:
    <<: *test-template
    docker:
      - image: cimg/python:3.8
  py310:
    <<: *test-template
    docker:
      - image: cimg/python:3.10
  py311:
    <<: *test-template
    docker:
      - image: cimg/python:3.11
  py312:
    <<: *test-template
    docker:
      - image: cimg/python:3.12
  py313:
    <<: *test-template
    docker:
      - image: cimg/python:3.13
workflows:
  test:
    jobs:
      - py27:
          is-py27: true
      - py38
      - py39
      - py310
      - py311
      - py312
      - py313
